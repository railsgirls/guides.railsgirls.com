---
layout: default
title: Adding Authentication with Devise
permalink: devise
---

# Adding Authentication with Devise

*Created by Piotr Steininger, [@polishprince](https://twitter.com/polishprince)*

*Updated by Ernesto Jimenez, [@ernesto_jimenez](https://twitter.com/ernesto_jimenez)*

**This guide assumes that you have already built a RailsGirls app by ** [**following the app development guide**](/app).


## Step 0: Add devise gem

Open up your `Gemfile` and add this line

{% highlight ruby %}
gem 'devise'
{% endhighlight %}
and run
{% highlight sh %}
bundle install
{% endhighlight %}
to install the gem

## Step 1: Set up devise in your app

Run the following command in the terminal.

{% highlight sh %}
rails g devise:install
{% endhighlight %}


## Step 2: Configure Devise

Ensure you have defined default url options in your environments files. Open up `config/environments/development.rb` and add this line:
{% highlight ruby %}
   config.action_mailer.default_url_options = { :host => 'localhost:3000' }
{% endhighlight %}

before the `end` keyword.

Open up `app/views/layouts/application.html.erb` and add:

{% highlight erb %}
<% if notice %>
  <p class="alert alert-notice"><%= notice %></p>
<% end %>
<% if alert %>
  <p class="alert alert-error"><%= alert %></p>
<% end %>
{% endhighlight %}
right above
{% highlight ruby %}
   <%= yield %>
{% endhighlight %}

Finally, if you plan to [deploy to heroku](/heroku) you should open up `config/application.rb` and add this line:
{% highlight ruby %}
  config.assets.initialize_on_precompile = false
{% endhighlight %}
as third line from the bottom (before the first of two `end` keywords)

## Step 3: Setup the User model

We'll use a bundled generator script to create the User model.
{% highlight sh %}
   rails g devise user
   rake db:migrate
{% endhighlight %}

**Coach:** Explain what user model has been generated. What are the
fields?

## Step 4: Create your first user

Now that you have set everyting up you can create your first user. Devise creates all the code and routes required to create accounts, log in, log out, etc.

Make sure your rails server is running, open [http://localhost:3000/users/sign_up](http://localhost:3000/users/sign_up) and create your user account.

## Step 5: Add sign-up and login links

All we need to do now is to add appropriate links or notice about the user being logged in in the top right corner of the navigation bar.

In order to do that, edit `app/views/layouts/application.html.erb` add:
{% highlight erb %}
<p class="navbar-text pull-right">
<% if user_signed_in? %>
  Logged in as <strong><%= current_user.email %></strong>.
  <%= link_to 'Edit profile', edit_user_registration_path, :class => 'navbar-link' %> |
  <%= link_to "Logout", destroy_user_session_path, method: :delete, :class => 'navbar-link'  %>
<% else %>
  <%= link_to "Sign up", new_user_registration_path, :class => 'navbar-link'  %> |
  <%= link_to "Login", new_user_session_path, :class => 'navbar-link'  %>
<% end %>
{% endhighlight %}
right after
{% highlight erb %}
<ul class="nav">
  <li class="active"><a href="/ideas">Ideas</a></li>
</ul>
{% endhighlight %}


Open your browser and try logging in and out from.

**Coach:** Talk about the `user_signed_in?` and `current_user` helpers. Why are they useful?

## What next?

* Add extra fields to the User model
* Add relationships between users and ideas
* Restrict users to only be able to edit their own ideas
* Expand to use roles or permissions (use one of the popular authorization gem like CanCan)


