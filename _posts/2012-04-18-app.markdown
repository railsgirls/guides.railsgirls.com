---
layout: default
title: Rails Girls App Tutorial
permalink: app
---

# Rails Girls App Tutorial

*Created by Vesa Vänskä, [@vesan](https://twitter.com/vesan)*
      
[**First, make sure you installed Rails, otherwise please follow this link.**](/install)


## Step 0: Get to know the tools

* Texteditor: (Gedit, Vim, Emacs, Komodo Edit, Sublime Text) are examples of texteditors your can use for writing code and editing files.
* Terminal / Command Prompt is where you start the rails server and run commands.
* Web browser (Firefox, Safari, Chrome) are for viewing your application.


## Step 1: Creating the application

We are going to create app called *railsgirls*.

First, let's open Terminal/Command Prompt:

* OS X: Open Spotlight, type *Terminal* and click appearing *Terminal* options.
* Windows: Click Start-menu and search for *Command Prompt* click *Command Prompt with Ruby on Rails*.

Next, type these commands:

{% highlight sh %}
mkdir projects
cd projects
rails new railsgirls
cd railsgirls
rails server
{% endhighlight %}

Open [http://localhost:3000](http://localhost:3000) in browser.

CTRL-C to exit the server in Terminal/Command Prompt.

**Coach:** Quick explanation about what each command does. What was generated? What does the server do.


## Step 2: Create Idea scaffold

We are using Rails&#8217; scaffolds to generate a starting point that allows us to list, add, remove, edit, and view things; in our case ideas.

**Coach:** What is a scaffold (1. the command, 2. the model name and related db table; pluralization/naming conventions, 3. attributes and types)? What are migrations and when do you need to do them, why?

{% highlight sh %}
rails generate scaffold idea name:string description:text picture:string
rake db:migrate
rails server
{% endhighlight %}

Open [http://localhost:3000/ideas](http://localhost:3000/ideas) in browser.

CTRL-C exits the server when you have clicked around for a little.

## Step 3: Design

**Coach:** Talk about the relationship of HTML and Rails; what part of views is HTML and what is Embedded Ruby (ERB)? How does this relate to MVC (models and controllers control the logic of dynamically generating HTML, or views)?

Design doesn&#8217;t look nice. Let&#8217;s do something about it. We&#8217;ll use Twitter&#8217;s Bootstrap project to give us nicer default styles really easily.

Open app/views/layouts/application.html.erb and add on top of

{% highlight erb %}
<%= stylesheet_link_tag "application" %>
{% endhighlight %}

the line

{% highlight erb %}
<link rel="stylesheet" href="http://railsgirls.com/assets/bootstrap.css">
{% endhighlight %}

and swap

{% highlight erb %}
<%= yield %>
{% endhighlight %}

for

{% highlight erb %}
<div class="container">
    <%= yield %>
</div>
{% endhighlight %}

Let&#8217;s also add topbar and footer to the layout and style those and the ideas table.

To the application.html.erb under `<body>` add:

{% highlight html %}
<div class="navbar navbar-fixed-top">
    <div class="navbar-inner">
        <div class="container">
            <a class="brand" href="/">The Idea app</a>
            <ul class="nav">
                <li class="active"><a href="/ideas">Ideas</a></li>
            </ul>
        </div>
    </div>
</div>
{% endhighlight %}

and before `</body>` add:

{% highlight html %}
<footer>
    <div class="container">
        Rails Girls 2012
    </div>
</footer>
{% endhighlight %}

Open app/assets/stylesheets/application.css and add to the bottom:

{% highlight css %}
#logo { 
    font-size: 20px;
    font-family: "Helvetica Neue",Helvetica,Arial,sans-serif;
    float: left;
    padding: 10px;
}
body { padding-top: 100px; }
footer { margin-top: 100px; }
table, td, th { vertical-align: middle !important; border: none !important; }
th { border-bottom: 1px solid #DDD !important; }
td.picture { width: 140px; }
td.picture img { width: 140px; }
{% endhighlight %}

**Coach:** Talk a little about CSS and layouts.


## Step 4: Adding picture uploads

We need to install additional library to add image processing.

Open Gemfile in the project and add

{% highlight ruby %}
gem 'carrierwave'
{% endhighlight %}

under the line

{% highlight ruby %}
gem 'sqlite3'
{% endhighlight %}

**Coach:** Tell what libraries are and why they are used. Maybe few words about Open Source?

Now we generate the needed code for picture handling. In the Terminal/Command Prompt run:

{% highlight sh %}
bundle
{% endhighlight %}

**At this point you need to restart the Rails server process in Terminal/Command Prompt.** This is needed for the app to load the added gem.

Then you can start adding the picture upload by running a command:

{% highlight sh %}
rails generate uploader Picture
{% endhighlight %}

Open app/models/idea.rb and add

{% highlight ruby %}
mount_uploader :picture, PictureUploader
{% endhighlight %}

under the line

{% highlight ruby %}
class Idea < ActiveRecord::Base
{% endhighlight %}

Open app/views/ideas/_form.html.erb and change

{% highlight erb %}
<%= f.text_field :picture %>
{% endhighlight %}

to

{% highlight erb %}
<%= f.file_field :picture %>
{% endhighlight %}

and

{% highlight erb %}
<%= form_for(@idea) do |f| %>
{% endhighlight %}

to

{% highlight erb %}
<%= form_for(@idea, :html => {:multipart => true}) do |f| %>
{% endhighlight %}

The view doesn&#8217;t look nice, it only shows a path to the file, so let&#8217;s fix it.

Open app/views/ideas/show.html.erb and change

{% highlight erb %}
<%= @idea.picture %>
{% endhighlight %}

to

{% highlight erb %}
<%= image_tag(@idea.picture_url, :width => 600) if @idea.picture.present? %>
{% endhighlight %}

**Coach:** Talk a little about HTML.


## Step 5: Finetune the routes

If you try to open [http://localhost:3000](http://localhost:3000) it still shows the default page. Let&#8217;s make it redirect to the ideas page.

On OS X and Linux, in the Terminal run:

{% highlight sh %}
rm public/index.html
{% endhighlight %}

In Windows, in the Command Prompt run:

{% highlight bat %}
del public\index.html
{% endhighlight %}

Then open config/routes.rb and add the following after the first line:

{% highlight ruby %}
root :to => redirect("/ideas")
{% endhighlight %}

**Coach:** Talk about routes.


## What next?

* Add design using HTML &amp; CSS
* Add ratings
* Use CoffeeScript (or JavaScript) to add interaction
* Add proper picture resizing to make loading the pictures faster
      

## Additional Guides

* GUIDE 1: [Add commenting by Janika Liiv](/commenting)
* GUIDE 2: [Put your app online with Heroku by Terence Lee](/heroku)
* GUIDE 3: [Build a map of workshop participants by Rails Girls Berlin](http://blog.railsgirlsberlin.de/apptutorial/)
